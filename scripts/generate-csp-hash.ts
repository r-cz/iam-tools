// Generates a CSP hash for the inline theme script in index.html
// Outputs src/csp-hashes.ts with a constant export

import { readFile, writeFile } from 'node:fs/promises'
import path from 'node:path'
import { createHash } from 'node:crypto'

async function main() {
  const repoRoot = process.cwd()
  const indexPath = path.join(repoRoot, 'index.html')
  const outPath = path.join(repoRoot, 'src', 'csp-hashes.ts')

  const html = await readFile(indexPath, 'utf8')
  // Find inline <script> blocks without a src attribute (case-insensitive)
  // Use the one that contains our theme bootstrapping if present.
  const re = /<script(?![^>]*\bsrc\b)[^>]*>([\s\S]*?)<\/script>/gi
  const matches: string[] = []
  let m: RegExpExecArray | null
  while ((m = re.exec(html)) !== null) {
    matches.push(m[1])
  }

  let scriptContent = ''
  if (matches.length === 0) {
    await writeFile(outPath, `export const CSP_INLINE_SCRIPT_SHA256 = ''\n`)
    console.warn('[generate-csp-hash] No inline <script> found in index.html; wrote empty hash')
    return
  } else if (matches.length === 1) {
    scriptContent = matches[0]
  } else {
    scriptContent = matches.find((s) => s.includes('iam-tools-theme')) || matches[0]
  }

  const hashBase64 = createHash('sha256').update(scriptContent, 'utf8').digest('base64')
  const value = `sha256-${hashBase64}`

  const out = `// Auto-generated by scripts/generate-csp-hash.ts\nexport const CSP_INLINE_SCRIPT_SHA256 = '${value}'\n`
  await writeFile(outPath, out)
  console.log('[generate-csp-hash] Wrote hash to src/csp-hashes.ts:', value)
}

main().catch((err) => {
  console.error('[generate-csp-hash] Failed:', err)
  process.exit(1)
})
