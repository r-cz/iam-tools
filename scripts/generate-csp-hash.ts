// Generates a CSP hash for the inline theme script in index.html
// Outputs src/csp-hashes.ts with a constant export

import { readFile, writeFile } from 'node:fs/promises'
import path from 'node:path'

async function main() {
  const repoRoot = process.cwd()
  const indexPath = path.join(repoRoot, 'index.html')
  const outPath = path.join(repoRoot, 'src', 'csp-hashes.ts')

  const html = await readFile(indexPath, 'utf8')
  // Extract the first inline <script>...</script> block in <head>
  const scriptRegex = /<script>([\s\S]*?)<\/script>/m
  const match = html.match(scriptRegex)
  if (!match) {
    await writeFile(outPath, `export const CSP_INLINE_SCRIPT_SHA256 = ''\n`)
    console.warn('[generate-csp-hash] No inline <script> found in index.html; wrote empty hash')
    return
  }

  const scriptContent = match[1]
  const enc = new TextEncoder()
  const data = enc.encode(scriptContent)
  const digest = await crypto.subtle.digest('SHA-256', data)
  const hashArray = Array.from(new Uint8Array(digest))
  const hashBase64 = Buffer.from(hashArray).toString('base64')
  const value = `sha256-${hashBase64}`

  const out = `// Auto-generated by scripts/generate-csp-hash.ts\nexport const CSP_INLINE_SCRIPT_SHA256 = '${value}'\n`
  await writeFile(outPath, out)
  console.log('[generate-csp-hash] Wrote hash to src/csp-hashes.ts:', value)
}

main().catch((err) => {
  console.error('[generate-csp-hash] Failed:', err)
  process.exit(1)
})

